var exec = require('child_process').exec;
var Q = require('q');
var path = require('path');
var localdir = require('localdir');
var _ = require('lodash');
var fs = require('fs');
var mkdirp = require('mkdirp');
var async = require('async');
var url = require('url');

var html_include = function(input, output, port) {
    var dir = path.dirname(input);
    var port = port || 4444;
    var serve_url = 'http://localhost:' + port;
    var basename = path.basename(input);
    var output_dir = output;

    html_include.createServer(dir, port);
    html_include.getReq(serve_url, basename)

    .then(function(url) {
        // move to relative file system path
        var uniq_url = _.uniq(url);
        return html_include.relative(serve_url, uniq_url);
    }, function(err) {
        console.error(err);
        process.exit(1)
    })


    .then(function(rel) {
        var d = Q.defer();
        // copied the files to output directory
        async.each(rel, function(rel, cb) {
            
            if(rel === '') {
                var folder_path = path.dirname(path.join(output_dir, rel, basename))
                if(!fs.existsSync(folder_path)) {
                    mkdirp.sync(folder_path);
                }
                // should copied the html file
                console.log('Saving to: ' + path.join(output_dir, rel, basename))
                html_include.copy(path.join(dir, rel, basename), path.join(output_dir, rel, basename), cb);
            }else if (rel.match(/^http*/gi)) {
                console.log('Http url: ' + rel);
                return d.resolve();
            }else {
                var folder_path = path.dirname(path.join(output_dir, rel))
                if(!fs.existsSync(folder_path)) {
                    mkdirp.sync(folder_path);
                }
                // other scripts and styles
                console.log('Saving to: ' + path.join(output_dir, rel))
                html_include.copy(path.join(dir, rel), path.join(output_dir, rel), cb);
            }
        }, function(err) {
            if(err)
                d.reject(new Error(err))
            else
                d.resolve()
        })

        return d.promise;
    }, function(err) {
        console.error(err);
        process.exit(2);
    })
    .then(function() {
        console.log('done!')
        process.exit(3);
    }, function(err) {
        console.error(err);
        process.exit(4);
    })
}

// starting a local server
html_include.createServer = function(url, port) {
    return localdir.serveDir(url, port);
}

// using phantomjs for requesting local server.
html_include.getReq = function(serve_url, base) {
    var d = Q.defer();
    exec(path.join(__dirname,  '../node_modules/.bin/phantomjs') + ' ' + path.join(__dirname, 'net.js') + ' ' + serve_url + '/' + base, 
        function (error, stdout, stderr) {
            // getting the requests
            var res_output = JSON.parse(stdout);
            var url_arr = [];
            _(res_output).forEach(function(res) {
                url_arr.push(res.url)
            })
            if (error !== null) {
                console.log('exec error: ' + error);
            }
            d.resolve(url_arr);
        }
    );
    return d.promise;
}

html_include.relative = function(serve, arr) {
    var relative_arr = [];

    _(arr).forEach(function(urlStr) {
        // hostname
        var hostname = url.parse(urlStr).hostname;
        if(hostname === 'localhost') {
            // localhost
            relative_arr.push(path.relative(serve, urlStr))
        }else {
            relative_arr.push(urlStr)
        }
    })
    return relative_arr;
}

html_include.copy = function(source, target, cb) {
    var d = Q.defer();

    var rd = fs.createReadStream(source);

    rd.on("error", function(err) {
        done(err);
    });

    var wr = fs.createWriteStream(target);

    wr.on("error", function(err) {
        done(err);
    });
    wr.on("close", function(ex) {
        done();
    });

    rd.pipe(wr);

    function done(err) {
        if(err)
            d.reject(new Error(err));
        else
            d.resolve(cb());
    }

    return d.promise;
}


module.exports = html_include;